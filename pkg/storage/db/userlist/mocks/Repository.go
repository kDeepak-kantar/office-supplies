// Code generated by mockery v2.19.0. DO NOT EDIT.

package mocks

import (
	userlist "github.com/Deepak/pkg/storage/db/userlist"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateUserList provides a mock function with given fields: c
func (_m *Repository) CreateUserList(c *userlist.Order) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*userlist.Order) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllApproved provides a mock function with given fields:
func (_m *Repository) GetAllApproved() ([]*userlist.Order, error) {
	ret := _m.Called()

	var r0 []*userlist.Order
	if rf, ok := ret.Get(0).(func() []*userlist.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userlist.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNotApproved provides a mock function with given fields:
func (_m *Repository) GetAllNotApproved() ([]*userlist.Order, error) {
	ret := _m.Called()

	var r0 []*userlist.Order
	if rf, ok := ret.Get(0).(func() []*userlist.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userlist.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllist provides a mock function with given fields:
func (_m *Repository) GetAllist() ([]*userlist.Order, error) {
	ret := _m.Called()

	var r0 []*userlist.Order
	if rf, ok := ret.Get(0).(func() []*userlist.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userlist.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByStringId provides a mock function with given fields: id
func (_m *Repository) GetOrderByStringId(id string) (*userlist.Order, error) {
	ret := _m.Called(id)

	var r0 *userlist.Order
	if rf, ok := ret.Get(0).(func(string) *userlist.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userlist.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByStringiId provides a mock function with given fields: id
func (_m *Repository) GetOrderByStringiId(id int) (*userlist.Order, error) {
	ret := _m.Called(id)

	var r0 *userlist.Order
	if rf, ok := ret.Get(0).(func(int) *userlist.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userlist.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields: id
func (_m *Repository) GetUserList(id string) ([]*userlist.Order, error) {
	ret := _m.Called(id)

	var r0 []*userlist.Order
	if rf, ok := ret.Get(0).(func(string) []*userlist.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userlist.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRemainder provides a mock function with given fields:
func (_m *Repository) SendRemainder() (map[string]interface{}, error) {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateList provides a mock function with given fields: c
func (_m *Repository) UpdateList(c *userlist.Order) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*userlist.Order) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
